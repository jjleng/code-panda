// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { ChatApiV1ChatPostData, ChatApiV1ChatPostError, HeartbeatApiV1HeartbeatPostData, HeartbeatApiV1HeartbeatPostError, HeartbeatApiV1HeartbeatPostResponse, CreateProjectApiV1ProjectsPostData, CreateProjectApiV1ProjectsPostError, CreateProjectApiV1ProjectsPostResponse, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostError, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponse, SetProjectSecretApiV1ProjectsProjectIdSecretsPostData, SetProjectSecretApiV1ProjectsProjectIdSecretsPostError, SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponse, UploadAssetsApiV1ProjectsProjectIdUploadPostData, UploadAssetsApiV1ProjectsProjectIdUploadPostError, UploadAssetsApiV1ProjectsProjectIdUploadPostResponse, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostError, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponse, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostError, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponse, ListProjectPathsApiV1ProjectsProjectIdPathsGetData, DownloadProjectApiV1ProjectsProjectIdDownloadGetData, SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostData, SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostError, SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostResponse, CreateSubdomainApiV1ProjectsProjectIdSubdomainPutData, CreateSubdomainApiV1ProjectsProjectIdSubdomainPutError, CreateSubdomainApiV1ProjectsProjectIdSubdomainPutResponse, EditProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutData, EditProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutError, EditProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutResponse, DeleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteData, DeleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteError, DeleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteResponse, GetProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGetData, PublishProjectApiV1ProjectsProjectIdPublishPostData, PublishProjectApiV1ProjectsProjectIdPublishPostError, PublishProjectApiV1ProjectsProjectIdPublishPostResponse, GetDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGetData, GetCreditsApiV1SubscriptionsCreditsGetData, RootGetData, HealthCheckHealthGetData, MetricsMetricsGetData } from '../types.gen';
import { chatApiV1ChatPost, heartbeatApiV1HeartbeatPost, createProjectApiV1ProjectsPost, integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePost, setProjectSecretApiV1ProjectsProjectIdSecretsPost, uploadAssetsApiV1ProjectsProjectIdUploadPost, generateSummaryApiV1ProjectsProjectIdGenerateSummaryPost, executeMigrationApiV1ProjectsProjectIdMigrationsPost, listProjectPathsApiV1ProjectsProjectIdPathsGet, downloadProjectApiV1ProjectsProjectIdDownloadGet, switchCommitApiV1ProjectsProjectIdSwitchCommitPost, createSubdomainApiV1ProjectsProjectIdSubdomainPut, editProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPut, deleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDelete, getProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGet, publishProjectApiV1ProjectsProjectIdPublishPost, getDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGet, getCreditsApiV1SubscriptionsCreditsGet, rootGet, healthCheckHealthGet, metricsMetricsGet, client } from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const chatApiV1ChatPostQueryKey = (options: Options<ChatApiV1ChatPostData>) => [
    createQueryKey('chatApiV1ChatPost', options)
];

export const chatApiV1ChatPostOptions = (options: Options<ChatApiV1ChatPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await chatApiV1ChatPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: chatApiV1ChatPostQueryKey(options)
    });
};

export const chatApiV1ChatPostMutation = (options?: Partial<Options<ChatApiV1ChatPostData>>) => {
    const mutationOptions: UseMutationOptions<unknown, ChatApiV1ChatPostError, Options<ChatApiV1ChatPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await chatApiV1ChatPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const heartbeatApiV1HeartbeatPostQueryKey = (options?: Options<HeartbeatApiV1HeartbeatPostData>) => [
    createQueryKey('heartbeatApiV1HeartbeatPost', options)
];

export const heartbeatApiV1HeartbeatPostOptions = (options?: Options<HeartbeatApiV1HeartbeatPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await heartbeatApiV1HeartbeatPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: heartbeatApiV1HeartbeatPostQueryKey(options)
    });
};

export const heartbeatApiV1HeartbeatPostMutation = (options?: Partial<Options<HeartbeatApiV1HeartbeatPostData>>) => {
    const mutationOptions: UseMutationOptions<HeartbeatApiV1HeartbeatPostResponse, HeartbeatApiV1HeartbeatPostError, Options<HeartbeatApiV1HeartbeatPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await heartbeatApiV1HeartbeatPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createProjectApiV1ProjectsPostQueryKey = (options: Options<CreateProjectApiV1ProjectsPostData>) => [
    createQueryKey('createProjectApiV1ProjectsPost', options)
];

export const createProjectApiV1ProjectsPostOptions = (options: Options<CreateProjectApiV1ProjectsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createProjectApiV1ProjectsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createProjectApiV1ProjectsPostQueryKey(options)
    });
};

export const createProjectApiV1ProjectsPostMutation = (options?: Partial<Options<CreateProjectApiV1ProjectsPostData>>) => {
    const mutationOptions: UseMutationOptions<CreateProjectApiV1ProjectsPostResponse, CreateProjectApiV1ProjectsPostError, Options<CreateProjectApiV1ProjectsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createProjectApiV1ProjectsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostQueryKey = (options: Options<IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData>) => [
    createQueryKey('integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePost', options)
];

export const integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostOptions = (options: Options<IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostQueryKey(options)
    });
};

export const integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostMutation = (options?: Partial<Options<IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData>>) => {
    const mutationOptions: UseMutationOptions<IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponse, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostError, Options<IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const setProjectSecretApiV1ProjectsProjectIdSecretsPostQueryKey = (options: Options<SetProjectSecretApiV1ProjectsProjectIdSecretsPostData>) => [
    createQueryKey('setProjectSecretApiV1ProjectsProjectIdSecretsPost', options)
];

export const setProjectSecretApiV1ProjectsProjectIdSecretsPostOptions = (options: Options<SetProjectSecretApiV1ProjectsProjectIdSecretsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await setProjectSecretApiV1ProjectsProjectIdSecretsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: setProjectSecretApiV1ProjectsProjectIdSecretsPostQueryKey(options)
    });
};

export const setProjectSecretApiV1ProjectsProjectIdSecretsPostMutation = (options?: Partial<Options<SetProjectSecretApiV1ProjectsProjectIdSecretsPostData>>) => {
    const mutationOptions: UseMutationOptions<SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponse, SetProjectSecretApiV1ProjectsProjectIdSecretsPostError, Options<SetProjectSecretApiV1ProjectsProjectIdSecretsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await setProjectSecretApiV1ProjectsProjectIdSecretsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const uploadAssetsApiV1ProjectsProjectIdUploadPostQueryKey = (options: Options<UploadAssetsApiV1ProjectsProjectIdUploadPostData>) => [
    createQueryKey('uploadAssetsApiV1ProjectsProjectIdUploadPost', options)
];

export const uploadAssetsApiV1ProjectsProjectIdUploadPostOptions = (options: Options<UploadAssetsApiV1ProjectsProjectIdUploadPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadAssetsApiV1ProjectsProjectIdUploadPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadAssetsApiV1ProjectsProjectIdUploadPostQueryKey(options)
    });
};

export const uploadAssetsApiV1ProjectsProjectIdUploadPostMutation = (options?: Partial<Options<UploadAssetsApiV1ProjectsProjectIdUploadPostData>>) => {
    const mutationOptions: UseMutationOptions<UploadAssetsApiV1ProjectsProjectIdUploadPostResponse, UploadAssetsApiV1ProjectsProjectIdUploadPostError, Options<UploadAssetsApiV1ProjectsProjectIdUploadPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadAssetsApiV1ProjectsProjectIdUploadPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const generateSummaryApiV1ProjectsProjectIdGenerateSummaryPostQueryKey = (options: Options<GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData>) => [
    createQueryKey('generateSummaryApiV1ProjectsProjectIdGenerateSummaryPost', options)
];

export const generateSummaryApiV1ProjectsProjectIdGenerateSummaryPostOptions = (options: Options<GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await generateSummaryApiV1ProjectsProjectIdGenerateSummaryPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: generateSummaryApiV1ProjectsProjectIdGenerateSummaryPostQueryKey(options)
    });
};

export const generateSummaryApiV1ProjectsProjectIdGenerateSummaryPostMutation = (options?: Partial<Options<GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData>>) => {
    const mutationOptions: UseMutationOptions<GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponse, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostError, Options<GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await generateSummaryApiV1ProjectsProjectIdGenerateSummaryPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const executeMigrationApiV1ProjectsProjectIdMigrationsPostQueryKey = (options: Options<ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData>) => [
    createQueryKey('executeMigrationApiV1ProjectsProjectIdMigrationsPost', options)
];

export const executeMigrationApiV1ProjectsProjectIdMigrationsPostOptions = (options: Options<ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await executeMigrationApiV1ProjectsProjectIdMigrationsPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: executeMigrationApiV1ProjectsProjectIdMigrationsPostQueryKey(options)
    });
};

export const executeMigrationApiV1ProjectsProjectIdMigrationsPostMutation = (options?: Partial<Options<ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData>>) => {
    const mutationOptions: UseMutationOptions<ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponse, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostError, Options<ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await executeMigrationApiV1ProjectsProjectIdMigrationsPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listProjectPathsApiV1ProjectsProjectIdPathsGetQueryKey = (options: Options<ListProjectPathsApiV1ProjectsProjectIdPathsGetData>) => [
    createQueryKey('listProjectPathsApiV1ProjectsProjectIdPathsGet', options)
];

export const listProjectPathsApiV1ProjectsProjectIdPathsGetOptions = (options: Options<ListProjectPathsApiV1ProjectsProjectIdPathsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listProjectPathsApiV1ProjectsProjectIdPathsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listProjectPathsApiV1ProjectsProjectIdPathsGetQueryKey(options)
    });
};

export const downloadProjectApiV1ProjectsProjectIdDownloadGetQueryKey = (options: Options<DownloadProjectApiV1ProjectsProjectIdDownloadGetData>) => [
    createQueryKey('downloadProjectApiV1ProjectsProjectIdDownloadGet', options)
];

export const downloadProjectApiV1ProjectsProjectIdDownloadGetOptions = (options: Options<DownloadProjectApiV1ProjectsProjectIdDownloadGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await downloadProjectApiV1ProjectsProjectIdDownloadGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: downloadProjectApiV1ProjectsProjectIdDownloadGetQueryKey(options)
    });
};

export const switchCommitApiV1ProjectsProjectIdSwitchCommitPostQueryKey = (options: Options<SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostData>) => [
    createQueryKey('switchCommitApiV1ProjectsProjectIdSwitchCommitPost', options)
];

export const switchCommitApiV1ProjectsProjectIdSwitchCommitPostOptions = (options: Options<SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await switchCommitApiV1ProjectsProjectIdSwitchCommitPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: switchCommitApiV1ProjectsProjectIdSwitchCommitPostQueryKey(options)
    });
};

export const switchCommitApiV1ProjectsProjectIdSwitchCommitPostMutation = (options?: Partial<Options<SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostData>>) => {
    const mutationOptions: UseMutationOptions<SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostResponse, SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostError, Options<SwitchCommitApiV1ProjectsProjectIdSwitchCommitPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await switchCommitApiV1ProjectsProjectIdSwitchCommitPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createSubdomainApiV1ProjectsProjectIdSubdomainPutMutation = (options?: Partial<Options<CreateSubdomainApiV1ProjectsProjectIdSubdomainPutData>>) => {
    const mutationOptions: UseMutationOptions<CreateSubdomainApiV1ProjectsProjectIdSubdomainPutResponse, CreateSubdomainApiV1ProjectsProjectIdSubdomainPutError, Options<CreateSubdomainApiV1ProjectsProjectIdSubdomainPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createSubdomainApiV1ProjectsProjectIdSubdomainPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const editProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutMutation = (options?: Partial<Options<EditProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutData>>) => {
    const mutationOptions: UseMutationOptions<EditProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutResponse, EditProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutError, Options<EditProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await editProjectSubdomainApiV1ProjectsProjectIdSubdomainEditPut({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteMutation = (options?: Partial<Options<DeleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteResponse, DeleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteError, Options<DeleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteSubdomainApiV1ProjectsProjectIdSubdomainDomainDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGetQueryKey = (options: Options<GetProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGetData>) => [
    createQueryKey('getProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGet', options)
];

export const getProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGetOptions = (options: Options<GetProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectPublishHistoryApiV1ProjectsProjectIdPublishHistoryGetQueryKey(options)
    });
};

export const publishProjectApiV1ProjectsProjectIdPublishPostQueryKey = (options: Options<PublishProjectApiV1ProjectsProjectIdPublishPostData>) => [
    createQueryKey('publishProjectApiV1ProjectsProjectIdPublishPost', options)
];

export const publishProjectApiV1ProjectsProjectIdPublishPostOptions = (options: Options<PublishProjectApiV1ProjectsProjectIdPublishPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await publishProjectApiV1ProjectsProjectIdPublishPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: publishProjectApiV1ProjectsProjectIdPublishPostQueryKey(options)
    });
};

export const publishProjectApiV1ProjectsProjectIdPublishPostMutation = (options?: Partial<Options<PublishProjectApiV1ProjectsProjectIdPublishPostData>>) => {
    const mutationOptions: UseMutationOptions<PublishProjectApiV1ProjectsProjectIdPublishPostResponse, PublishProjectApiV1ProjectsProjectIdPublishPostError, Options<PublishProjectApiV1ProjectsProjectIdPublishPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await publishProjectApiV1ProjectsProjectIdPublishPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGetQueryKey = (options: Options<GetDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGetData>) => [
    createQueryKey('getDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGet', options)
];

export const getDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGetOptions = (options: Options<GetDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDomainStatusApiV1ProjectsProjectIdDomainStatusDomainGetQueryKey(options)
    });
};

export const getCreditsApiV1SubscriptionsCreditsGetQueryKey = (options?: Options<GetCreditsApiV1SubscriptionsCreditsGetData>) => [
    createQueryKey('getCreditsApiV1SubscriptionsCreditsGet', options)
];

export const getCreditsApiV1SubscriptionsCreditsGetOptions = (options?: Options<GetCreditsApiV1SubscriptionsCreditsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCreditsApiV1SubscriptionsCreditsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCreditsApiV1SubscriptionsCreditsGetQueryKey(options)
    });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => [
    createQueryKey('rootGet', options)
];

export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const healthCheckHealthGetQueryKey = (options?: Options<HealthCheckHealthGetData>) => [
    createQueryKey('healthCheckHealthGet', options)
];

export const healthCheckHealthGetOptions = (options?: Options<HealthCheckHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckHealthGetQueryKey(options)
    });
};

export const metricsMetricsGetQueryKey = (options?: Options<MetricsMetricsGetData>) => [
    createQueryKey('metricsMetricsGet', options)
];

export const metricsMetricsGetOptions = (options?: Options<MetricsMetricsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await metricsMetricsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: metricsMetricsGetQueryKey(options)
    });
};