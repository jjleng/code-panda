// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type UseMutationOptions } from '@tanstack/react-query';
import type { CheckPreviewData, GetFileContentData, GetFileTreeData, GetCommitsData, GetCommitsError, GetCommitsResponse, GetCommitDiffData, GetFileDiffData, SwitchCommitData, SwitchCommitError, SwitchCommitResponse, HealthData, AddPackageData, AddPackageError, AddPackageResponse, BuildSiteData, BuildSiteError, BuildSiteResponse, CheckBuildErrorsData, CheckBuildErrorsError, CheckBuildErrorsResponse, LintProjectData, LintProjectError, LintProjectResponse, StartProjectData, StartProjectError, StartProjectResponse, StopProjectData, StopProjectError, StopProjectResponse } from '../types.gen';
import { checkPreview, getFileContent, getFileTree, getCommits, getCommitDiff, getFileDiff, switchCommit, health, addPackage, buildSite, checkBuildErrors, lintProject, startProject, stopProject, client } from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const checkPreviewQueryKey = (options?: Options<CheckPreviewData>) => [
    createQueryKey('checkPreview', options)
];

export const checkPreviewOptions = (options?: Options<CheckPreviewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await checkPreview({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: checkPreviewQueryKey(options)
    });
};

export const getFileContentQueryKey = (options: Options<GetFileContentData>) => [
    createQueryKey('getFileContent', options)
];

export const getFileContentOptions = (options: Options<GetFileContentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFileContent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFileContentQueryKey(options)
    });
};

export const getFileTreeQueryKey = (options: Options<GetFileTreeData>) => [
    createQueryKey('getFileTree', options)
];

export const getFileTreeOptions = (options: Options<GetFileTreeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFileTree({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFileTreeQueryKey(options)
    });
};

export const getCommitsQueryKey = (options: Options<GetCommitsData>) => [
    createQueryKey('getCommits', options)
];

export const getCommitsOptions = (options: Options<GetCommitsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommitsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getCommitsInfiniteQueryKey = (options: Options<GetCommitsData>): QueryKey<Options<GetCommitsData>> => [
    createQueryKey('getCommits', options, true)
];

export const getCommitsInfiniteOptions = (options: Options<GetCommitsData>) => {
    return infiniteQueryOptions<GetCommitsResponse, GetCommitsError, InfiniteData<GetCommitsResponse>, QueryKey<Options<GetCommitsData>>, string | Pick<QueryKey<Options<GetCommitsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetCommitsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getCommits({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommitsInfiniteQueryKey(options)
    });
};

export const getCommitDiffQueryKey = (options: Options<GetCommitDiffData>) => [
    createQueryKey('getCommitDiff', options)
];

export const getCommitDiffOptions = (options: Options<GetCommitDiffData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCommitDiff({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCommitDiffQueryKey(options)
    });
};

export const getFileDiffQueryKey = (options: Options<GetFileDiffData>) => [
    createQueryKey('getFileDiff', options)
];

export const getFileDiffOptions = (options: Options<GetFileDiffData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getFileDiff({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getFileDiffQueryKey(options)
    });
};

export const switchCommitQueryKey = (options: Options<SwitchCommitData>) => [
    createQueryKey('switchCommit', options)
];

export const switchCommitOptions = (options: Options<SwitchCommitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await switchCommit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: switchCommitQueryKey(options)
    });
};

export const switchCommitMutation = (options?: Partial<Options<SwitchCommitData>>) => {
    const mutationOptions: UseMutationOptions<SwitchCommitResponse, SwitchCommitError, Options<SwitchCommitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await switchCommit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const healthQueryKey = (options?: Options<HealthData>) => [
    createQueryKey('health', options)
];

export const healthOptions = (options?: Options<HealthData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await health({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthQueryKey(options)
    });
};

export const addPackageQueryKey = (options: Options<AddPackageData>) => [
    createQueryKey('addPackage', options)
];

export const addPackageOptions = (options: Options<AddPackageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addPackage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addPackageQueryKey(options)
    });
};

export const addPackageMutation = (options?: Partial<Options<AddPackageData>>) => {
    const mutationOptions: UseMutationOptions<AddPackageResponse, AddPackageError, Options<AddPackageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addPackage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const buildSiteQueryKey = (options: Options<BuildSiteData>) => [
    createQueryKey('buildSite', options)
];

export const buildSiteOptions = (options: Options<BuildSiteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await buildSite({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: buildSiteQueryKey(options)
    });
};

export const buildSiteMutation = (options?: Partial<Options<BuildSiteData>>) => {
    const mutationOptions: UseMutationOptions<BuildSiteResponse, BuildSiteError, Options<BuildSiteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await buildSite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const checkBuildErrorsQueryKey = (options: Options<CheckBuildErrorsData>) => [
    createQueryKey('checkBuildErrors', options)
];

export const checkBuildErrorsOptions = (options: Options<CheckBuildErrorsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await checkBuildErrors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: checkBuildErrorsQueryKey(options)
    });
};

export const checkBuildErrorsMutation = (options?: Partial<Options<CheckBuildErrorsData>>) => {
    const mutationOptions: UseMutationOptions<CheckBuildErrorsResponse, CheckBuildErrorsError, Options<CheckBuildErrorsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await checkBuildErrors({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const lintProjectQueryKey = (options: Options<LintProjectData>) => [
    createQueryKey('lintProject', options)
];

export const lintProjectOptions = (options: Options<LintProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await lintProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: lintProjectQueryKey(options)
    });
};

export const lintProjectMutation = (options?: Partial<Options<LintProjectData>>) => {
    const mutationOptions: UseMutationOptions<LintProjectResponse, LintProjectError, Options<LintProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await lintProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const startProjectQueryKey = (options: Options<StartProjectData>) => [
    createQueryKey('startProject', options)
];

export const startProjectOptions = (options: Options<StartProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await startProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: startProjectQueryKey(options)
    });
};

export const startProjectMutation = (options?: Partial<Options<StartProjectData>>) => {
    const mutationOptions: UseMutationOptions<StartProjectResponse, StartProjectError, Options<StartProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await startProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const stopProjectQueryKey = (options: Options<StopProjectData>) => [
    createQueryKey('stopProject', options)
];

export const stopProjectOptions = (options: Options<StopProjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await stopProject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: stopProjectQueryKey(options)
    });
};

export const stopProjectMutation = (options?: Partial<Options<StopProjectData>>) => {
    const mutationOptions: UseMutationOptions<StopProjectResponse, StopProjectError, Options<StopProjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await stopProject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};