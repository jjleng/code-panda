// This file is auto-generated by @hey-api/openapi-ts

export type AddPackageRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Name of the package to add
     */
    package_name: string;
    /**
     * ID of the project
     */
    project_id: string;
    /**
     * Whether to restart the server after installing the package (default: false)
     */
    restart_server: boolean;
};

export type AddPackageResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Installation output or error message
     */
    message: string;
    /**
     * Whether the package installation was successful
     */
    success: boolean;
};

export type BuildErrorResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Whether there were any build errors
     */
    buildErrors: boolean;
    /**
     * Build error check output message
     */
    message: string;
};

export type BuildSiteRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * ID of the project to build
     */
    project_id: string;
};

export type BuildSiteResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Build output or error message
     */
    message: string;
    /**
     * Path to the build output directory if successful
     */
    output_dir: string;
    /**
     * Whether the build was successful
     */
    success: boolean;
};

export type CheckPreviewResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    healthy: boolean;
    status: number;
};

export type Commit = {
    /**
     * Commit date
     */
    date: string;
    /**
     * Changed files in the commit
     */
    files: Array<CommitFile> | null;
    /**
     * Commit hash
     */
    hash: string;
    /**
     * Commit message
     */
    message: string;
};

export type CommitFile = {
    /**
     * Path of the changed file
     */
    path: string;
    /**
     * Type of change (added, modified, deleted)
     */
    type: string;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type FileDiff = {
    /**
     * Modified content of the file
     */
    new_text: string;
    /**
     * Original content of the file
     */
    old_text: string;
    /**
     * Path of the file
     */
    path: string;
};

export type FileNode = {
    /**
     * Child nodes for directories
     */
    children?: Array<FileNode> | null;
    /**
     * Name of the file or directory
     */
    name: string;
    /**
     * Type of the node (file or folder)
     */
    type: string;
};

export type FileSystemResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Root node of the file system tree
     */
    root: FileNode;
};

export type GetCommitDiffResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * List of file changes
     */
    changes: Array<FileDiff> | null;
};

export type GetCommitsResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * List of commits
     */
    commits: Array<Commit> | null;
    /**
     * Whether there are more commits available
     */
    has_next_page: boolean;
    /**
     * Cursor for the next page
     */
    next_cursor?: string;
};

export type GetFileContentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Content of the file (base64 encoded for binary files)
     */
    content: string;
    /**
     * MIME type of the file
     */
    mime_type: string;
};

export type GetFileDiffResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * File diff details
     */
    diff: FileDiff;
};

export type LintResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Whether there were any lint errors
     */
    lintErrors: boolean;
    /**
     * Linting output message
     */
    message: string;
};

export type ProjectOperationRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * ID of the project
     */
    project_id: string;
};

export type ProjectOperationResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Operation result message
     */
    message: string;
};

export type SwitchCommitRequestBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Hash of the commit to switch to
     */
    commit_hash: string;
    /**
     * ID of the project
     */
    project_id: string;
};

export type SwitchCommitResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Operation result message
     */
    message: string;
};

export type CheckPreviewData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string;
    };
    url: '/check-preview';
};

export type CheckPreviewErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type CheckPreviewError = CheckPreviewErrors[keyof CheckPreviewErrors];

export type CheckPreviewResponses = {
    /**
     * OK
     */
    200: CheckPreviewResponseBody;
};

export type CheckPreviewResponse = CheckPreviewResponses[keyof CheckPreviewResponses];

export type GetFileContentData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of the project
         */
        project_id: string;
        /**
         * Path to the file relative to project path
         */
        file_path: string;
    };
    url: '/files/content';
};

export type GetFileContentErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetFileContentError = GetFileContentErrors[keyof GetFileContentErrors];

export type GetFileContentResponses = {
    /**
     * OK
     */
    200: GetFileContentResponseBody;
};

export type GetFileContentResponse = GetFileContentResponses[keyof GetFileContentResponses];

export type GetFileTreeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of the project
         */
        project_id: string;
    };
    url: '/files/tree';
};

export type GetFileTreeErrors = {
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetFileTreeError = GetFileTreeErrors[keyof GetFileTreeErrors];

export type GetFileTreeResponses = {
    /**
     * OK
     */
    200: FileSystemResponseBody;
};

export type GetFileTreeResponse = GetFileTreeResponses[keyof GetFileTreeResponses];

export type GetCommitsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of the project
         */
        project_id: string;
        /**
         * Cursor for pagination (commit hash)
         */
        cursor?: string;
        /**
         * Maximum number of commits to return (default: 20)
         */
        limit?: number;
    };
    url: '/git/commits';
};

export type GetCommitsErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetCommitsError = GetCommitsErrors[keyof GetCommitsErrors];

export type GetCommitsResponses = {
    /**
     * OK
     */
    200: GetCommitsResponseBody;
};

export type GetCommitsResponse = GetCommitsResponses[keyof GetCommitsResponses];

export type GetCommitDiffData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of the project
         */
        project_id: string;
        /**
         * Hash of the commit
         */
        commit_hash: string;
    };
    url: '/git/commits/diff';
};

export type GetCommitDiffErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetCommitDiffError = GetCommitDiffErrors[keyof GetCommitDiffErrors];

export type GetCommitDiffResponses = {
    /**
     * OK
     */
    200: GetCommitDiffResponseBody;
};

export type GetCommitDiffResponse = GetCommitDiffResponses[keyof GetCommitDiffResponses];

export type GetFileDiffData = {
    body?: never;
    path?: never;
    query: {
        /**
         * ID of the project
         */
        project_id: string;
        /**
         * Hash of the commit
         */
        commit_hash: string;
        /**
         * Path of the file
         */
        file_path: string;
    };
    url: '/git/commits/file_diff';
};

export type GetFileDiffErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type GetFileDiffError = GetFileDiffErrors[keyof GetFileDiffErrors];

export type GetFileDiffResponses = {
    /**
     * OK
     */
    200: GetFileDiffResponseBody;
};

export type GetFileDiffResponse = GetFileDiffResponses[keyof GetFileDiffResponses];

export type SwitchCommitData = {
    body: SwitchCommitRequestBody;
    path?: never;
    query?: never;
    url: '/git/commits/switch';
};

export type SwitchCommitErrors = {
    /**
     * Bad Request
     */
    400: ErrorModel;
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type SwitchCommitError = SwitchCommitErrors[keyof SwitchCommitErrors];

export type SwitchCommitResponses = {
    /**
     * OK
     */
    200: SwitchCommitResponseBody;
};

export type SwitchCommitResponse = SwitchCommitResponses[keyof SwitchCommitResponses];

export type HealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthErrors = {
    /**
     * Error
     */
    default: ErrorModel;
};

export type HealthError = HealthErrors[keyof HealthErrors];

export type HealthResponses = {
    /**
     * No Content
     */
    204: void;
};

export type HealthResponse = HealthResponses[keyof HealthResponses];

export type AddPackageData = {
    body: AddPackageRequestBody;
    path?: never;
    query?: never;
    url: '/projects/add-package';
};

export type AddPackageErrors = {
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type AddPackageError = AddPackageErrors[keyof AddPackageErrors];

export type AddPackageResponses = {
    /**
     * OK
     */
    200: AddPackageResponseBody;
};

export type AddPackageResponse = AddPackageResponses[keyof AddPackageResponses];

export type BuildSiteData = {
    body: BuildSiteRequestBody;
    path?: never;
    query?: never;
    url: '/projects/build-site';
};

export type BuildSiteErrors = {
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type BuildSiteError = BuildSiteErrors[keyof BuildSiteErrors];

export type BuildSiteResponses = {
    /**
     * OK
     */
    200: BuildSiteResponseBody;
};

export type BuildSiteResponse = BuildSiteResponses[keyof BuildSiteResponses];

export type CheckBuildErrorsData = {
    body: ProjectOperationRequestBody;
    path?: never;
    query?: never;
    url: '/projects/check-errors';
};

export type CheckBuildErrorsErrors = {
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type CheckBuildErrorsError = CheckBuildErrorsErrors[keyof CheckBuildErrorsErrors];

export type CheckBuildErrorsResponses = {
    /**
     * OK
     */
    200: BuildErrorResponseBody;
};

export type CheckBuildErrorsResponse = CheckBuildErrorsResponses[keyof CheckBuildErrorsResponses];

export type LintProjectData = {
    body: ProjectOperationRequestBody;
    path?: never;
    query?: never;
    url: '/projects/lint';
};

export type LintProjectErrors = {
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type LintProjectError = LintProjectErrors[keyof LintProjectErrors];

export type LintProjectResponses = {
    /**
     * OK
     */
    200: LintResponseBody;
};

export type LintProjectResponse = LintProjectResponses[keyof LintProjectResponses];

export type StartProjectData = {
    body: ProjectOperationRequestBody;
    path?: never;
    query?: never;
    url: '/projects/start';
};

export type StartProjectErrors = {
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type StartProjectError = StartProjectErrors[keyof StartProjectErrors];

export type StartProjectResponses = {
    /**
     * Created
     */
    201: ProjectOperationResponseBody;
};

export type StartProjectResponse = StartProjectResponses[keyof StartProjectResponses];

export type StopProjectData = {
    body: ProjectOperationRequestBody;
    path?: never;
    query?: never;
    url: '/projects/stop';
};

export type StopProjectErrors = {
    /**
     * Unprocessable Entity
     */
    422: ErrorModel;
    /**
     * Internal Server Error
     */
    500: ErrorModel;
};

export type StopProjectError = StopProjectErrors[keyof StopProjectErrors];

export type StopProjectResponses = {
    /**
     * OK
     */
    200: ProjectOperationResponseBody;
};

export type StopProjectResponse = StopProjectResponses[keyof StopProjectResponses];