// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { CheckPreviewData, CheckPreviewResponse, CheckPreviewError, GetFileContentData, GetFileContentResponse, GetFileContentError, GetFileTreeData, GetFileTreeResponse, GetFileTreeError, GetCommitsData, GetCommitsResponse, GetCommitsError, GetCommitDiffData, GetCommitDiffResponse, GetCommitDiffError, GetFileDiffData, GetFileDiffResponse, GetFileDiffError, SwitchCommitData, SwitchCommitResponse, SwitchCommitError, HealthData, HealthResponse, HealthError, AddPackageData, AddPackageResponse, AddPackageError, BuildSiteData, BuildSiteResponse, BuildSiteError, CheckBuildErrorsData, CheckBuildErrorsResponse, CheckBuildErrorsError, LintProjectData, LintProjectResponse, LintProjectError, StartProjectData, StartProjectResponse, StartProjectError, StopProjectData, StopProjectResponse, StopProjectError } from './types.gen';

export const client = createClient(createConfig());

/**
 * Check preview server status
 * Returns status of the preview server for a project
 */
export const checkPreview = <ThrowOnError extends boolean = false>(options?: Options<CheckPreviewData, ThrowOnError>) => {
    return (options?.client ?? client).get<CheckPreviewResponse, CheckPreviewError, ThrowOnError>({
        url: '/check-preview',
        ...options
    });
};

/**
 * Get file content
 * Get the content of a specific file
 */
export const getFileContent = <ThrowOnError extends boolean = false>(options: Options<GetFileContentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFileContentResponse, GetFileContentError, ThrowOnError>({
        url: '/files/content',
        ...options
    });
};

/**
 * Get file system tree
 * Get the file system tree structure for a project
 */
export const getFileTree = <ThrowOnError extends boolean = false>(options: Options<GetFileTreeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFileTreeResponse, GetFileTreeError, ThrowOnError>({
        url: '/files/tree',
        ...options
    });
};

/**
 * Get commit history
 * Get list of commits in the repository
 */
export const getCommits = <ThrowOnError extends boolean = false>(options: Options<GetCommitsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCommitsResponse, GetCommitsError, ThrowOnError>({
        url: '/git/commits',
        ...options
    });
};

/**
 * Get commit diff
 * Get diff for a specific commit
 */
export const getCommitDiff = <ThrowOnError extends boolean = false>(options: Options<GetCommitDiffData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCommitDiffResponse, GetCommitDiffError, ThrowOnError>({
        url: '/git/commits/diff',
        ...options
    });
};

/**
 * Get file diff
 * Get diff for a specific file in a commit
 */
export const getFileDiff = <ThrowOnError extends boolean = false>(options: Options<GetFileDiffData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFileDiffResponse, GetFileDiffError, ThrowOnError>({
        url: '/git/commits/file_diff',
        ...options
    });
};

/**
 * Switch to commit
 * Switch working directory to a specific commit
 */
export const switchCommit = <ThrowOnError extends boolean = false>(options: Options<SwitchCommitData, ThrowOnError>) => {
    return (options?.client ?? client).post<SwitchCommitResponse, SwitchCommitError, ThrowOnError>({
        url: '/git/commits/switch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Health check endpoint
 * Returns 200 OK if the service is healthy
 */
export const health = <ThrowOnError extends boolean = false>(options?: Options<HealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthResponse, HealthError, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Add package
 * Add a package using the project's package manager
 */
export const addPackage = <ThrowOnError extends boolean = false>(options: Options<AddPackageData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddPackageResponse, AddPackageError, ThrowOnError>({
        url: '/projects/add-package',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Build website
 * Build a website project and return the output directory
 */
export const buildSite = <ThrowOnError extends boolean = false>(options: Options<BuildSiteData, ThrowOnError>) => {
    return (options?.client ?? client).post<BuildSiteResponse, BuildSiteError, ThrowOnError>({
        url: '/projects/build-site',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check build errors
 * Check for build errors in a project
 */
export const checkBuildErrors = <ThrowOnError extends boolean = false>(options: Options<CheckBuildErrorsData, ThrowOnError>) => {
    return (options?.client ?? client).post<CheckBuildErrorsResponse, CheckBuildErrorsError, ThrowOnError>({
        url: '/projects/check-errors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Run linting
 * Run linting checks on a project
 */
export const lintProject = <ThrowOnError extends boolean = false>(options: Options<LintProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<LintProjectResponse, LintProjectError, ThrowOnError>({
        url: '/projects/lint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Start a project
 * Starts a project with given ID
 */
export const startProject = <ThrowOnError extends boolean = false>(options: Options<StartProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<StartProjectResponse, StartProjectError, ThrowOnError>({
        url: '/projects/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop a project
 * Stops a running project
 */
export const stopProject = <ThrowOnError extends boolean = false>(options: Options<StopProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<StopProjectResponse, StopProjectError, ThrowOnError>({
        url: '/projects/stop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};